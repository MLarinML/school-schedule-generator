#!/usr/bin/env node

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function clearRateLimits() {
  try {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ rate limiting –∑–∞–ø–∏—Å–µ–π...\n');
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–æ –æ—á–∏—Å—Ç–∫–∏
    const beforeCount = await prisma.rateLimit.count();
    console.log(`üìä –ó–∞–ø–∏—Å–µ–π –¥–æ –æ—á–∏—Å—Ç–∫–∏: ${beforeCount}`);
    
    if (beforeCount === 0) {
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —á–∏—Å—Ç–∞—è');
      return;
    }
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ rate limiting
    const result = await prisma.rateLimit.deleteMany({});
    
    console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${result.count}`);
    console.log('‚úÖ Rate limiting –∑–∞–ø–∏—Å–∏ –æ—á–∏—â–µ–Ω—ã');
    console.log('\nüí° –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å–Ω–æ–≤–∞ –¥–µ–ª–∞—Ç—å –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞');
    console.log('üéØ –ù–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã: 50 –ø–æ–ø—ã—Ç–æ–∫ –∑–∞ 60 –º–∏–Ω—É—Ç');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ rate limiting:', error);
  } finally {
    await prisma.$disconnect();
  }
}

clearRateLimits();
