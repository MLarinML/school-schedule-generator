#!/usr/bin/env node

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function debugRateLimits() {
  try {
    console.log('üîç –û—Ç–ª–∞–¥–∫–∞ rate limiting...\n');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ rate limiting
    const rateLimits = await prisma.rateLimit.findMany({
      orderBy: { windowStartsAt: 'desc' }
    });
    
    console.log(`üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${rateLimits.length}\n`);
    
    if (rateLimits.length === 0) {
      console.log('‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö rate limiting –∑–∞–ø–∏—Å–µ–π');
      return;
    }
    
    rateLimits.forEach((limit, index) => {
      console.log(`üìù –ó–∞–ø–∏—Å—å ${index + 1}:`);
      console.log(`   –ö–ª—é—á: ${limit.key}`);
      console.log(`   –°—á–µ—Ç—á–∏–∫: ${limit.count}`);
      console.log(`   –û–∫–Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è: ${limit.windowStartsAt}`);
      console.log(`   –û–∫–Ω–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è: ${limit.windowEndsAt}`);
      console.log(`   –°–æ–∑–¥–∞–Ω–æ: ${limit.windowStartsAt}`);
      
      const now = new Date();
      const windowEnds = new Date(limit.windowEndsAt);
      const isExpired = now > windowEnds;
      
      console.log(`   –û–∫–Ω–æ –∏—Å—Ç–µ–∫–ª–æ: ${isExpired ? '–î–∞' : '–ù–µ—Ç'}`);
      console.log(`   –í—Ä–µ–º—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è: ${isExpired ? '–ò—Å—Ç–µ–∫–ª–æ' : Math.round((windowEnds - now) / 1000 / 60) + ' –º–∏–Ω—É—Ç'}`);
      console.log('');
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    console.log('‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    console.log(`   RATE_LIMIT_WINDOW: ${process.env.RATE_LIMIT_WINDOW || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`);
    console.log(`   RATE_LIMIT_MAX_ATTEMPTS: ${process.env.RATE_LIMIT_MAX_ATTEMPTS || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`);
    
    const windowMs = parseInt(process.env.RATE_LIMIT_WINDOW || '900000');
    const maxAttempts = parseInt(process.env.RATE_LIMIT_MAX_ATTEMPTS || '5');
    
    console.log(`   –û–∫–Ω–æ (–º–∏–Ω—É—Ç—ã): ${Math.round(windowMs / 1000 / 60)}`);
    console.log(`   –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫: ${maxAttempts}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ:', error);
  } finally {
    await prisma.$disconnect();
  }
}

debugRateLimits();
