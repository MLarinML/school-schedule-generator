#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Yandex Email —Å–µ—Ä–≤–∏—Å–∞\n');

console.log('üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:');
console.log('1. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç Yandex');
console.log('2. –í–∫–ª—é—á–∏—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é');
console.log('3. –°–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
console.log('4. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∏–∂–µ\n');

const questions = [
  {
    key: 'SMTP_USER',
    question: '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email Yandex (–Ω–∞–ø—Ä–∏–º–µ—Ä: vasya@yandex.ru): ',
    validate: (value) => {
      if (!value.includes('@yandex.ru') && !value.includes('@ya.ru')) {
        return 'Email –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å –¥–æ–º–µ–Ω–æ–º @yandex.ru –∏–ª–∏ @ya.ru';
      }
      return true;
    }
  },
  {
    key: 'SMTP_PASS',
    question: '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (16 —Å–∏–º–≤–æ–ª–æ–≤): ',
    validate: (value) => {
      if (value.length !== 16) {
        return '–ü–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 16 —Å–∏–º–≤–æ–ª–æ–≤';
      }
      return true;
    }
  }
];

let answers = {};

function askQuestion(index) {
  if (index >= questions.length) {
    updateEnvFile();
    return;
  }

  const question = questions[index];
  
  rl.question(question.question, (answer) => {
    const validation = question.validate(answer);
    
    if (validation !== true) {
      console.log(`‚ùå ${validation}\n`);
      askQuestion(index);
      return;
    }
    
    answers[question.key] = answer;
    askQuestion(index + 1);
  });
}

function updateEnvFile() {
  const envPath = path.join(process.cwd(), '.env');
  
  try {
    let envContent = fs.readFileSync(envPath, 'utf8');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    envContent = envContent.replace(
      /SMTP_USER="[^"]*"/,
      `SMTP_USER="${answers.SMTP_USER}"`
    );
    
    envContent = envContent.replace(
      /SMTP_PASS="[^"]*"/,
      `SMTP_PASS="${answers.SMTP_PASS}"`
    );
    
    fs.writeFileSync(envPath, envContent);
    
    console.log('\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    testConnection();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ .env:', error.message);
    rl.close();
  }
}

function testConnection() {
  const { exec } = require('child_process');
  
  exec('curl -X POST http://localhost:3001/api/email/test-connection', (error, stdout, stderr) => {
    if (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
      console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: npm run dev');
    } else {
      try {
        const result = JSON.parse(stdout);
        if (result.success) {
          console.log('‚úÖ Email —Å–µ—Ä–≤–∏—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
          console.log('üéâ –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –ø–æ–ª—É—á–∞—Ç—å –ø–∏—Å—å–º–∞!');
        } else {
          console.log('‚ùå Email —Å–µ—Ä–≤–∏—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:');
          console.log(result.message);
          if (result.instructions) {
            console.log('\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:');
            result.instructions.forEach(instruction => {
              console.log(`   ${instruction}`);
            });
          }
        }
      } catch (parseError) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞:', parseError.message);
        console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', stdout);
      }
    }
    
    rl.close();
  });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
askQuestion(0);
