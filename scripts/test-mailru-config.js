#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Mail.ru email...\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª .env
const envPath = path.join(process.cwd(), '.env');

if (!fs.existsSync(envPath)) {
  console.log('‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω');
  console.log('üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ env.example');
  process.exit(1);
}

// –ß–∏—Ç–∞–µ–º .env —Ñ–∞–π–ª
const envContent = fs.readFileSync(envPath, 'utf8');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Mail.ru
const checks = [
  {
    name: 'SMTP_HOST',
    pattern: /SMTP_HOST="([^"]+)"/,
    expected: 'smtp.yandex.ru',
    description: 'SMTP —Ö–æ—Å—Ç'
  },
  {
    name: 'SMTP_PORT',
    pattern: /SMTP_PORT=(\d+)/,
    expected: '587',
    description: 'SMTP –ø–æ—Ä—Ç'
  },
  {
    name: 'SMTP_SECURE',
    pattern: /SMTP_SECURE=(true|false)/,
    expected: 'false',
    description: 'SMTP –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'
  },
  {
    name: 'SMTP_USER',
    pattern: /SMTP_USER="([^"]+)"/,
    expected: 'your-email@mail.ru',
    description: 'SMTP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
  },
  {
    name: 'SMTP_PASS',
    pattern: /SMTP_PASS="([^"]+)"/,
    expected: 'your-mailru-app-password',
    description: 'SMTP –ø–∞—Ä–æ–ª—å'
  }
];

let allPassed = true;

console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫:\n');

checks.forEach(check => {
  const match = envContent.match(check.pattern);
  
  if (!match) {
    console.log(`‚ùå ${check.name}: –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    allPassed = false;
    return;
  }
  
  const value = match[1];
  const isDefault = value === check.expected;
  
  if (isDefault) {
    console.log(`‚ö†Ô∏è  ${check.name}: ${value} (–Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)`);
    allPassed = false;
  } else {
    console.log(`‚úÖ ${check.name}: ${value}`);
  }
});

console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:');

if (allPassed) {
  console.log('‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!');
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...');
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  const { exec } = require('child_process');
  
  exec('curl -X POST http://localhost:3000/api/email/test-connection', (error, stdout, stderr) => {
    if (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
      console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: npm run dev');
    } else {
      try {
        const result = JSON.parse(stdout);
        if (result.success) {
          console.log('üéâ Mail.ru email —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!');
        } else {
          console.log('‚ùå Mail.ru email —Å–µ—Ä–≤–∏—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:');
          console.log(result.message);
        }
      } catch (parseError) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞:', parseError.message);
      }
    }
  });
  
} else {
  console.log('‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è');
  console.log('\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ');
}
