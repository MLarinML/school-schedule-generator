#!/usr/bin/env node

const https = require('https');
const http = require('http');

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ª–∏–º–∏—Ç–æ–≤ rate limiting...\n');

const baseUrl = 'http://localhost:3000';
const testEmail = 'test@example.com';
const testPassword = 'wrongpassword';

async function makeRequest(path, data) {
  return new Promise((resolve, reject) => {
    const postData = JSON.stringify(data);
    
    const options = {
      hostname: 'localhost',
      port: 3000,
      path: path,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(postData)
      }
    };

    const req = http.request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => {
        body += chunk;
      });
      res.on('end', () => {
        try {
          const jsonBody = JSON.parse(body);
          resolve({
            status: res.statusCode,
            data: jsonBody
          });
        } catch (e) {
          resolve({
            status: res.statusCode,
            data: body
          });
        }
      });
    });

    req.on('error', (err) => {
      reject(err);
    });

    req.write(postData);
    req.end();
  });
}

async function testLoginAttempts() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞...');
  
  let successCount = 0;
  let rateLimitedCount = 0;
  
  // –î–µ–ª–∞–µ–º 10 –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
  for (let i = 1; i <= 10; i++) {
    try {
      const response = await makeRequest('/api/auth/login', {
        email: testEmail,
        password: testPassword
      });
      
      if (response.status === 429) {
        rateLimitedCount++;
        console.log(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${i}: Rate limited (429)`);
        console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${response.data.message || 'Rate limited'}`);
      } else if (response.status === 401 || response.status === 403) {
        successCount++;
        console.log(`‚úÖ –ü–æ–ø—ã—Ç–∫–∞ ${i}: –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (${response.status}) - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ`);
      } else {
        console.log(`‚ö†Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ ${i}: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å ${response.status}`);
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 100));
      
    } catch (error) {
      console.log(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${i}: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ - ${error.message}`);
    }
  }
  
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${successCount}`);
  console.log(`‚ùå Rate limited: ${rateLimitedCount}`);
  
  if (rateLimitedCount === 0) {
    console.log('üéâ –û—Ç–ª–∏—á–Ω–æ! Rate limiting –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ 10 –ø–æ–ø—ã—Ç–æ–∫');
    console.log('üí° –ü–æ–∂–∏–ª—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å–ø–æ–∫–æ–π–Ω–æ –¥–µ–ª–∞—Ç—å –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ');
  } else {
    console.log('‚ö†Ô∏è  Rate limiting –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–∏–π');
  }
}

async function testRegistrationAttempts() {
  console.log('\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...');
  
  let successCount = 0;
  let rateLimitedCount = 0;
  
  // –î–µ–ª–∞–µ–º 5 –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º email
  for (let i = 1; i <= 5; i++) {
    try {
      const response = await makeRequest('/api/auth/register', {
        email: `test${i}@example.com`,
        password: 'testpassword123',
        fullName: `Test User ${i}`
      });
      
      if (response.status === 429) {
        rateLimitedCount++;
        console.log(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${i}: Rate limited (429)`);
      } else if (response.status === 400 || response.status === 409) {
        successCount++;
        console.log(`‚úÖ –ü–æ–ø—ã—Ç–∫–∞ ${i}: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (${response.status}) - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ`);
      } else {
        console.log(`‚ö†Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ ${i}: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å ${response.status}`);
      }
      
      await new Promise(resolve => setTimeout(resolve, 100));
      
    } catch (error) {
      console.log(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${i}: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ - ${error.message}`);
    }
  }
  
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:');
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${successCount}`);
  console.log(`‚ùå Rate limited: ${rateLimitedCount}`);
}

async function runTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–æ–≤—ã—Ö –ª–∏–º–∏—Ç–æ–≤...\n');
  
  await testLoginAttempts();
  await testRegistrationAttempts();
  
  console.log('\nüéØ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ:');
  console.log('–ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ rate limiting:');
  console.log('- 50 –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞ –∑–∞ 60 –º–∏–Ω—É—Ç');
  console.log('- 50 –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞ 60 –º–∏–Ω—É—Ç');
  console.log('- –î—Ä—É–∂–µ–ª—é–±–Ω–µ–µ –¥–ª—è –ø–æ–∂–∏–ª—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  console.log('- –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—â–∏—Ç—É –æ—Ç –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–π');
}

runTests().catch(console.error);
